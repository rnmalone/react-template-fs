// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`routes/Counter Should match snapshot 1`] = `
<TestAppWrapper>
  <MockStore>
    <Provider
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
    >
      <Connect(AppIntlProvider)>
        <AppIntlProvider
          dispatch={[Function]}
          localeCode="en-GB"
          localeMessages={Object {}}
          supportedLanguages={Array []}
        >
          <IntlProvider
            defaultFormats={Object {}}
            defaultLocale="en"
            formats={Object {}}
            locale="en"
            messages={Object {}}
            onError={[Function]}
            textComponent={Symbol(react.fragment)}
          >
            <MockedProvider
              addTypename={true}
            >
              <ApolloProvider
                client={
                  ApolloClient {
                    "cache": InMemoryCache {
                      "addTypename": true,
                      "config": Object {
                        "addTypename": true,
                        "dataIdFromObject": [Function],
                        "resultCaching": true,
                        "typePolicies": Object {},
                      },
                      "data": Root {
                        "canRead": [Function],
                        "data": Object {},
                        "getFieldValue": [Function],
                        "group": CacheGroup {
                          "caching": true,
                          "d": [Function],
                          "keyMaker": Trie {
                            "makeData": [Function],
                            "weakness": true,
                          },
                        },
                        "policies": Policies {
                          "cache": [Circular],
                          "config": Object {
                            "cache": [Circular],
                            "dataIdFromObject": [Function],
                            "possibleTypes": undefined,
                            "typePolicies": Object {},
                          },
                          "fuzzySubtypes": Map {},
                          "rootIdsByTypename": Object {
                            "Mutation": "ROOT_MUTATION",
                            "Query": "ROOT_QUERY",
                            "Subscription": "ROOT_SUBSCRIPTION",
                          },
                          "rootTypenamesById": Object {
                            "ROOT_MUTATION": "Mutation",
                            "ROOT_QUERY": "Query",
                            "ROOT_SUBSCRIPTION": "Subscription",
                          },
                          "supertypeMap": Map {},
                          "toBeAdded": Object {},
                          "typePolicies": Object {},
                          "usingPossibleTypes": false,
                        },
                        "refs": Object {},
                        "rootIds": Object {},
                        "sharedLayerGroup": CacheGroup {
                          "caching": true,
                          "d": [Function],
                          "keyMaker": Trie {
                            "makeData": [Function],
                            "weakness": true,
                          },
                        },
                        "storageTrie": Trie {
                          "makeData": [Function],
                          "weakness": true,
                        },
                        "toReference": [Function],
                      },
                      "getFragmentDoc": [Function],
                      "makeVar": [Function],
                      "maybeBroadcastWatch": [Function],
                      "optimisticData": Root {
                        "canRead": [Function],
                        "data": Object {},
                        "getFieldValue": [Function],
                        "group": CacheGroup {
                          "caching": true,
                          "d": [Function],
                          "keyMaker": Trie {
                            "makeData": [Function],
                            "weakness": true,
                          },
                        },
                        "policies": Policies {
                          "cache": [Circular],
                          "config": Object {
                            "cache": [Circular],
                            "dataIdFromObject": [Function],
                            "possibleTypes": undefined,
                            "typePolicies": Object {},
                          },
                          "fuzzySubtypes": Map {},
                          "rootIdsByTypename": Object {
                            "Mutation": "ROOT_MUTATION",
                            "Query": "ROOT_QUERY",
                            "Subscription": "ROOT_SUBSCRIPTION",
                          },
                          "rootTypenamesById": Object {
                            "ROOT_MUTATION": "Mutation",
                            "ROOT_QUERY": "Query",
                            "ROOT_SUBSCRIPTION": "Subscription",
                          },
                          "supertypeMap": Map {},
                          "toBeAdded": Object {},
                          "typePolicies": Object {},
                          "usingPossibleTypes": false,
                        },
                        "refs": Object {},
                        "rootIds": Object {},
                        "sharedLayerGroup": CacheGroup {
                          "caching": true,
                          "d": [Function],
                          "keyMaker": Trie {
                            "makeData": [Function],
                            "weakness": true,
                          },
                        },
                        "storageTrie": Trie {
                          "makeData": [Function],
                          "weakness": true,
                        },
                        "toReference": [Function],
                      },
                      "policies": Policies {
                        "cache": [Circular],
                        "config": Object {
                          "cache": [Circular],
                          "dataIdFromObject": [Function],
                          "possibleTypes": undefined,
                          "typePolicies": Object {},
                        },
                        "fuzzySubtypes": Map {},
                        "rootIdsByTypename": Object {
                          "Mutation": "ROOT_MUTATION",
                          "Query": "ROOT_QUERY",
                          "Subscription": "ROOT_SUBSCRIPTION",
                        },
                        "rootTypenamesById": Object {
                          "ROOT_MUTATION": "Mutation",
                          "ROOT_QUERY": "Query",
                          "ROOT_SUBSCRIPTION": "Subscription",
                        },
                        "supertypeMap": Map {},
                        "toBeAdded": Object {},
                        "typePolicies": Object {},
                        "usingPossibleTypes": false,
                      },
                      "storeReader": StoreReader {
                        "config": Object {
                          "addTypename": true,
                          "cache": [Circular],
                        },
                        "executeSelectionSet": [Function],
                        "executeSubSelectedArray": [Function],
                        "knownResults": WeakMap {},
                      },
                      "storeWriter": StoreWriter {
                        "cache": [Circular],
                        "reader": StoreReader {
                          "config": Object {
                            "addTypename": true,
                            "cache": [Circular],
                          },
                          "executeSelectionSet": [Function],
                          "executeSubSelectedArray": [Function],
                          "knownResults": WeakMap {},
                        },
                      },
                      "txCount": 0,
                      "typenameDocumentCache": Map {},
                      "watchDep": [Function],
                      "watches": Set {},
                    },
                    "clearStoreCallbacks": Array [],
                    "defaultOptions": Object {},
                    "disableNetworkFetches": false,
                    "link": MockLink {
                      "addTypename": true,
                      "mockedResponsesByKey": Object {},
                    },
                    "localState": LocalState {
                      "cache": InMemoryCache {
                        "addTypename": true,
                        "config": Object {
                          "addTypename": true,
                          "dataIdFromObject": [Function],
                          "resultCaching": true,
                          "typePolicies": Object {},
                        },
                        "data": Root {
                          "canRead": [Function],
                          "data": Object {},
                          "getFieldValue": [Function],
                          "group": CacheGroup {
                            "caching": true,
                            "d": [Function],
                            "keyMaker": Trie {
                              "makeData": [Function],
                              "weakness": true,
                            },
                          },
                          "policies": Policies {
                            "cache": [Circular],
                            "config": Object {
                              "cache": [Circular],
                              "dataIdFromObject": [Function],
                              "possibleTypes": undefined,
                              "typePolicies": Object {},
                            },
                            "fuzzySubtypes": Map {},
                            "rootIdsByTypename": Object {
                              "Mutation": "ROOT_MUTATION",
                              "Query": "ROOT_QUERY",
                              "Subscription": "ROOT_SUBSCRIPTION",
                            },
                            "rootTypenamesById": Object {
                              "ROOT_MUTATION": "Mutation",
                              "ROOT_QUERY": "Query",
                              "ROOT_SUBSCRIPTION": "Subscription",
                            },
                            "supertypeMap": Map {},
                            "toBeAdded": Object {},
                            "typePolicies": Object {},
                            "usingPossibleTypes": false,
                          },
                          "refs": Object {},
                          "rootIds": Object {},
                          "sharedLayerGroup": CacheGroup {
                            "caching": true,
                            "d": [Function],
                            "keyMaker": Trie {
                              "makeData": [Function],
                              "weakness": true,
                            },
                          },
                          "storageTrie": Trie {
                            "makeData": [Function],
                            "weakness": true,
                          },
                          "toReference": [Function],
                        },
                        "getFragmentDoc": [Function],
                        "makeVar": [Function],
                        "maybeBroadcastWatch": [Function],
                        "optimisticData": Root {
                          "canRead": [Function],
                          "data": Object {},
                          "getFieldValue": [Function],
                          "group": CacheGroup {
                            "caching": true,
                            "d": [Function],
                            "keyMaker": Trie {
                              "makeData": [Function],
                              "weakness": true,
                            },
                          },
                          "policies": Policies {
                            "cache": [Circular],
                            "config": Object {
                              "cache": [Circular],
                              "dataIdFromObject": [Function],
                              "possibleTypes": undefined,
                              "typePolicies": Object {},
                            },
                            "fuzzySubtypes": Map {},
                            "rootIdsByTypename": Object {
                              "Mutation": "ROOT_MUTATION",
                              "Query": "ROOT_QUERY",
                              "Subscription": "ROOT_SUBSCRIPTION",
                            },
                            "rootTypenamesById": Object {
                              "ROOT_MUTATION": "Mutation",
                              "ROOT_QUERY": "Query",
                              "ROOT_SUBSCRIPTION": "Subscription",
                            },
                            "supertypeMap": Map {},
                            "toBeAdded": Object {},
                            "typePolicies": Object {},
                            "usingPossibleTypes": false,
                          },
                          "refs": Object {},
                          "rootIds": Object {},
                          "sharedLayerGroup": CacheGroup {
                            "caching": true,
                            "d": [Function],
                            "keyMaker": Trie {
                              "makeData": [Function],
                              "weakness": true,
                            },
                          },
                          "storageTrie": Trie {
                            "makeData": [Function],
                            "weakness": true,
                          },
                          "toReference": [Function],
                        },
                        "policies": Policies {
                          "cache": [Circular],
                          "config": Object {
                            "cache": [Circular],
                            "dataIdFromObject": [Function],
                            "possibleTypes": undefined,
                            "typePolicies": Object {},
                          },
                          "fuzzySubtypes": Map {},
                          "rootIdsByTypename": Object {
                            "Mutation": "ROOT_MUTATION",
                            "Query": "ROOT_QUERY",
                            "Subscription": "ROOT_SUBSCRIPTION",
                          },
                          "rootTypenamesById": Object {
                            "ROOT_MUTATION": "Mutation",
                            "ROOT_QUERY": "Query",
                            "ROOT_SUBSCRIPTION": "Subscription",
                          },
                          "supertypeMap": Map {},
                          "toBeAdded": Object {},
                          "typePolicies": Object {},
                          "usingPossibleTypes": false,
                        },
                        "storeReader": StoreReader {
                          "config": Object {
                            "addTypename": true,
                            "cache": [Circular],
                          },
                          "executeSelectionSet": [Function],
                          "executeSubSelectedArray": [Function],
                          "knownResults": WeakMap {},
                        },
                        "storeWriter": StoreWriter {
                          "cache": [Circular],
                          "reader": StoreReader {
                            "config": Object {
                              "addTypename": true,
                              "cache": [Circular],
                            },
                            "executeSelectionSet": [Function],
                            "executeSubSelectedArray": [Function],
                            "knownResults": WeakMap {},
                          },
                        },
                        "txCount": 0,
                        "typenameDocumentCache": Map {},
                        "watchDep": [Function],
                        "watches": Set {},
                      },
                      "client": [Circular],
                    },
                    "mutate": [Function],
                    "query": [Function],
                    "queryDeduplication": true,
                    "queryManager": QueryManager {
                      "assumeImmutableResults": false,
                      "cache": InMemoryCache {
                        "addTypename": true,
                        "config": Object {
                          "addTypename": true,
                          "dataIdFromObject": [Function],
                          "resultCaching": true,
                          "typePolicies": Object {},
                        },
                        "data": Root {
                          "canRead": [Function],
                          "data": Object {},
                          "getFieldValue": [Function],
                          "group": CacheGroup {
                            "caching": true,
                            "d": [Function],
                            "keyMaker": Trie {
                              "makeData": [Function],
                              "weakness": true,
                            },
                          },
                          "policies": Policies {
                            "cache": [Circular],
                            "config": Object {
                              "cache": [Circular],
                              "dataIdFromObject": [Function],
                              "possibleTypes": undefined,
                              "typePolicies": Object {},
                            },
                            "fuzzySubtypes": Map {},
                            "rootIdsByTypename": Object {
                              "Mutation": "ROOT_MUTATION",
                              "Query": "ROOT_QUERY",
                              "Subscription": "ROOT_SUBSCRIPTION",
                            },
                            "rootTypenamesById": Object {
                              "ROOT_MUTATION": "Mutation",
                              "ROOT_QUERY": "Query",
                              "ROOT_SUBSCRIPTION": "Subscription",
                            },
                            "supertypeMap": Map {},
                            "toBeAdded": Object {},
                            "typePolicies": Object {},
                            "usingPossibleTypes": false,
                          },
                          "refs": Object {},
                          "rootIds": Object {},
                          "sharedLayerGroup": CacheGroup {
                            "caching": true,
                            "d": [Function],
                            "keyMaker": Trie {
                              "makeData": [Function],
                              "weakness": true,
                            },
                          },
                          "storageTrie": Trie {
                            "makeData": [Function],
                            "weakness": true,
                          },
                          "toReference": [Function],
                        },
                        "getFragmentDoc": [Function],
                        "makeVar": [Function],
                        "maybeBroadcastWatch": [Function],
                        "optimisticData": Root {
                          "canRead": [Function],
                          "data": Object {},
                          "getFieldValue": [Function],
                          "group": CacheGroup {
                            "caching": true,
                            "d": [Function],
                            "keyMaker": Trie {
                              "makeData": [Function],
                              "weakness": true,
                            },
                          },
                          "policies": Policies {
                            "cache": [Circular],
                            "config": Object {
                              "cache": [Circular],
                              "dataIdFromObject": [Function],
                              "possibleTypes": undefined,
                              "typePolicies": Object {},
                            },
                            "fuzzySubtypes": Map {},
                            "rootIdsByTypename": Object {
                              "Mutation": "ROOT_MUTATION",
                              "Query": "ROOT_QUERY",
                              "Subscription": "ROOT_SUBSCRIPTION",
                            },
                            "rootTypenamesById": Object {
                              "ROOT_MUTATION": "Mutation",
                              "ROOT_QUERY": "Query",
                              "ROOT_SUBSCRIPTION": "Subscription",
                            },
                            "supertypeMap": Map {},
                            "toBeAdded": Object {},
                            "typePolicies": Object {},
                            "usingPossibleTypes": false,
                          },
                          "refs": Object {},
                          "rootIds": Object {},
                          "sharedLayerGroup": CacheGroup {
                            "caching": true,
                            "d": [Function],
                            "keyMaker": Trie {
                              "makeData": [Function],
                              "weakness": true,
                            },
                          },
                          "storageTrie": Trie {
                            "makeData": [Function],
                            "weakness": true,
                          },
                          "toReference": [Function],
                        },
                        "policies": Policies {
                          "cache": [Circular],
                          "config": Object {
                            "cache": [Circular],
                            "dataIdFromObject": [Function],
                            "possibleTypes": undefined,
                            "typePolicies": Object {},
                          },
                          "fuzzySubtypes": Map {},
                          "rootIdsByTypename": Object {
                            "Mutation": "ROOT_MUTATION",
                            "Query": "ROOT_QUERY",
                            "Subscription": "ROOT_SUBSCRIPTION",
                          },
                          "rootTypenamesById": Object {
                            "ROOT_MUTATION": "Mutation",
                            "ROOT_QUERY": "Query",
                            "ROOT_SUBSCRIPTION": "Subscription",
                          },
                          "supertypeMap": Map {},
                          "toBeAdded": Object {},
                          "typePolicies": Object {},
                          "usingPossibleTypes": false,
                        },
                        "storeReader": StoreReader {
                          "config": Object {
                            "addTypename": true,
                            "cache": [Circular],
                          },
                          "executeSelectionSet": [Function],
                          "executeSubSelectedArray": [Function],
                          "knownResults": WeakMap {},
                        },
                        "storeWriter": StoreWriter {
                          "cache": [Circular],
                          "reader": StoreReader {
                            "config": Object {
                              "addTypename": true,
                              "cache": [Circular],
                            },
                            "executeSelectionSet": [Function],
                            "executeSubSelectedArray": [Function],
                            "knownResults": WeakMap {},
                          },
                        },
                        "txCount": 0,
                        "typenameDocumentCache": Map {},
                        "watchDep": [Function],
                        "watches": Set {},
                      },
                      "clientAwareness": Object {
                        "name": undefined,
                        "version": undefined,
                      },
                      "fetchCancelFns": Map {},
                      "inFlightLinkObservables": Map {},
                      "link": MockLink {
                        "addTypename": true,
                        "mockedResponsesByKey": Object {},
                      },
                      "localState": LocalState {
                        "cache": InMemoryCache {
                          "addTypename": true,
                          "config": Object {
                            "addTypename": true,
                            "dataIdFromObject": [Function],
                            "resultCaching": true,
                            "typePolicies": Object {},
                          },
                          "data": Root {
                            "canRead": [Function],
                            "data": Object {},
                            "getFieldValue": [Function],
                            "group": CacheGroup {
                              "caching": true,
                              "d": [Function],
                              "keyMaker": Trie {
                                "makeData": [Function],
                                "weakness": true,
                              },
                            },
                            "policies": Policies {
                              "cache": [Circular],
                              "config": Object {
                                "cache": [Circular],
                                "dataIdFromObject": [Function],
                                "possibleTypes": undefined,
                                "typePolicies": Object {},
                              },
                              "fuzzySubtypes": Map {},
                              "rootIdsByTypename": Object {
                                "Mutation": "ROOT_MUTATION",
                                "Query": "ROOT_QUERY",
                                "Subscription": "ROOT_SUBSCRIPTION",
                              },
                              "rootTypenamesById": Object {
                                "ROOT_MUTATION": "Mutation",
                                "ROOT_QUERY": "Query",
                                "ROOT_SUBSCRIPTION": "Subscription",
                              },
                              "supertypeMap": Map {},
                              "toBeAdded": Object {},
                              "typePolicies": Object {},
                              "usingPossibleTypes": false,
                            },
                            "refs": Object {},
                            "rootIds": Object {},
                            "sharedLayerGroup": CacheGroup {
                              "caching": true,
                              "d": [Function],
                              "keyMaker": Trie {
                                "makeData": [Function],
                                "weakness": true,
                              },
                            },
                            "storageTrie": Trie {
                              "makeData": [Function],
                              "weakness": true,
                            },
                            "toReference": [Function],
                          },
                          "getFragmentDoc": [Function],
                          "makeVar": [Function],
                          "maybeBroadcastWatch": [Function],
                          "optimisticData": Root {
                            "canRead": [Function],
                            "data": Object {},
                            "getFieldValue": [Function],
                            "group": CacheGroup {
                              "caching": true,
                              "d": [Function],
                              "keyMaker": Trie {
                                "makeData": [Function],
                                "weakness": true,
                              },
                            },
                            "policies": Policies {
                              "cache": [Circular],
                              "config": Object {
                                "cache": [Circular],
                                "dataIdFromObject": [Function],
                                "possibleTypes": undefined,
                                "typePolicies": Object {},
                              },
                              "fuzzySubtypes": Map {},
                              "rootIdsByTypename": Object {
                                "Mutation": "ROOT_MUTATION",
                                "Query": "ROOT_QUERY",
                                "Subscription": "ROOT_SUBSCRIPTION",
                              },
                              "rootTypenamesById": Object {
                                "ROOT_MUTATION": "Mutation",
                                "ROOT_QUERY": "Query",
                                "ROOT_SUBSCRIPTION": "Subscription",
                              },
                              "supertypeMap": Map {},
                              "toBeAdded": Object {},
                              "typePolicies": Object {},
                              "usingPossibleTypes": false,
                            },
                            "refs": Object {},
                            "rootIds": Object {},
                            "sharedLayerGroup": CacheGroup {
                              "caching": true,
                              "d": [Function],
                              "keyMaker": Trie {
                                "makeData": [Function],
                                "weakness": true,
                              },
                            },
                            "storageTrie": Trie {
                              "makeData": [Function],
                              "weakness": true,
                            },
                            "toReference": [Function],
                          },
                          "policies": Policies {
                            "cache": [Circular],
                            "config": Object {
                              "cache": [Circular],
                              "dataIdFromObject": [Function],
                              "possibleTypes": undefined,
                              "typePolicies": Object {},
                            },
                            "fuzzySubtypes": Map {},
                            "rootIdsByTypename": Object {
                              "Mutation": "ROOT_MUTATION",
                              "Query": "ROOT_QUERY",
                              "Subscription": "ROOT_SUBSCRIPTION",
                            },
                            "rootTypenamesById": Object {
                              "ROOT_MUTATION": "Mutation",
                              "ROOT_QUERY": "Query",
                              "ROOT_SUBSCRIPTION": "Subscription",
                            },
                            "supertypeMap": Map {},
                            "toBeAdded": Object {},
                            "typePolicies": Object {},
                            "usingPossibleTypes": false,
                          },
                          "storeReader": StoreReader {
                            "config": Object {
                              "addTypename": true,
                              "cache": [Circular],
                            },
                            "executeSelectionSet": [Function],
                            "executeSubSelectedArray": [Function],
                            "knownResults": WeakMap {},
                          },
                          "storeWriter": StoreWriter {
                            "cache": [Circular],
                            "reader": StoreReader {
                              "config": Object {
                                "addTypename": true,
                                "cache": [Circular],
                              },
                              "executeSelectionSet": [Function],
                              "executeSubSelectedArray": [Function],
                              "knownResults": WeakMap {},
                            },
                          },
                          "txCount": 0,
                          "typenameDocumentCache": Map {},
                          "watchDep": [Function],
                          "watches": Set {},
                        },
                        "client": [Circular],
                      },
                      "mutationIdCounter": 1,
                      "mutationStore": Object {},
                      "onBroadcast": [Function],
                      "queries": Map {},
                      "queryDeduplication": true,
                      "queryIdCounter": 1,
                      "requestIdCounter": 1,
                      "ssrMode": false,
                      "transformCache": WeakMap {},
                    },
                    "reFetchObservableQueries": [Function],
                    "resetStore": [Function],
                    "resetStoreCallbacks": Array [],
                    "typeDefs": undefined,
                    "version": "3.3.15",
                    "watchQuery": [Function],
                  }
                }
              >
                <Counter
                  counterValue={0}
                  setCounterValue={[MockFunction]}
                >
                  <h2>
                    pages.counter.title
                  </h2>
                  <div>
                    <input
                      id="counter-input"
                      onChange={[Function]}
                      type="number"
                      value={0}
                    />
                  </div>
                </Counter>
              </ApolloProvider>
            </MockedProvider>
          </IntlProvider>
        </AppIntlProvider>
      </Connect(AppIntlProvider)>
    </Provider>
  </MockStore>
</TestAppWrapper>
`;
